<!DOCTYPE html>
<html>
<head>
  <%= render 'layouts/links' %>
  <%= render 'layouts/styles' %>
</head>
<body>
    <%= render 'layouts/navbar' %>
    <main>
      <div class="container">
        <div class="row">
          <div class="col s12 m10 offset-m1">
            <div class="card">
              <div class="card-image">
                <video muted autoplay playsinline id="qr-video" width="100%" height=""></video>
                <canvas style="display:none;" id="debug-canvas"></canvas>
                <span class="card-title"Scan the QR Code</span>
              </div>
              <div class="card-content">
                <span id="cam-qr-result">None</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>

    <%= render 'layouts/scripts' %>

  <script type="module">
      import QrScanner from "/js/qr-scanner.min.js";
      const video = document.getElementById('qr-video');
      const debugCheckbox = document.getElementById('debug-checkbox');
      const debugCanvas = document.getElementById('debug-canvas');
      const debugCanvasContext = debugCanvas.getContext('2d');
      const camQrResult = document.getElementById('cam-qr-result');
      const fileSelector = document.getElementById('file-selector');
      const fileQrResult = document.getElementById('file-qr-result');

      function setResult(label, result) {
          label.textContent = result;
          label.style.color = 'teal';
          clearTimeout(label.highlightTimeout);
          label.highlightTimeout = setTimeout(() => label.style.color = 'inherit', 100);
      }


      // ####### Web Cam Scanning #######

      const scanner = new QrScanner(video, result => setResult(camQrResult, result));
      scanner.start();


      // ####### File Scanning #######

      fileSelector.addEventListener('change', event => {
          const file = fileSelector.files[0];
          if (!file) {
              return;
          }
          QrScanner.scanImage(file)
              .then(result => setResult(fileQrResult, result))
              .catch(e => setResult(fileQrResult, e || 'No QR code found.'));
      });


      // ####### debug mode related code #######

      debugCheckbox.addEventListener('change', () => setDebugMode(debugCheckbox.checked));

      function setDebugMode(isDebug) {
          const worker = scanner._qrWorker;
          worker.postMessage({
              type: 'setDebug',
              data: isDebug
          });
          if (isDebug) {
              debugCanvas.style.display = 'block';
              worker.addEventListener('message', handleDebugImage);
          } else {
              debugCanvas.style.display = 'none';
              worker.removeEventListener('message', handleDebugImage);
          }
      }

      function handleDebugImage(event) {
          const type = event.data.type;
          if (type === 'debugImage') {
              const imageData = event.data.data;
              if (debugCanvas.width !== imageData.width || debugCanvas.height !== imageData.height) {
                  debugCanvas.width = imageData.width;
                  debugCanvas.height = imageData.height;
              }
              debugCanvasContext.putImageData(imageData, 0, 0);
          }
      }
  </script>
</body>
</html>